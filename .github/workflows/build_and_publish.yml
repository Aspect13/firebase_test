on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'New Release version'
        required: true
        default: '0.0.0'
env:
  MODULE_NAME: 'firebase_test'

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4.0.0
            
  #     - name: Node 16 setup
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16

  #     - name: Pack .asar
  #       run: |
  #         npm i
  #         npm i asar
  #         ./node_modules/.bin/asar pack . "${{ env.MODULE_NAME }}.asar"
          
  #     - name: Upload artifact
  #       # https://github.com/actions/upload-artifact
  #       uses: actions/upload-artifact@v3.1.3
  #       with:
  #         name: "${{ env.MODULE_NAME }}.asar"
  #         path: "${{ env.MODULE_NAME }}.asar"
  #         retention-days: 1
  
  # release_github:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download Artifact
  #       uses: actions/download-artifact@v2.1.1
  #       with:
  #         name: "${{ env.MODULE_NAME }}.asar"
            
  #     - name: GH Release          
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: ${{ github.event.inputs.release_version }}
  #         files: "${{ env.MODULE_NAME }}.asar"
  #         generate_release_notes: true

  release_firebase:
    # needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2.1.1
        with:
          name: "${{ env.MODULE_NAME }}.asar"

      - name: Upload to Firestore
        run: |
          cat > upload.py << EOF
          from firebase_admin import credentials, initialize_app, storage
          import json
          from os import environ
          cr = json.loads(environ['FIREBASE_CREDS'])
          cred = credentials.Certificate(cr)
          initialize_app(cred)
          file_name = environ['MODULE_NAME']
          file_name = f'{file_name}.asar'
          bucket = storage.bucket('public')
          blob = bucket.blob(file_name)
          blob.upload_from_filename(file_name)
          print('Done', blob.public_url)
          EOF
          echo "Cat done"
          cat upload.py
          
